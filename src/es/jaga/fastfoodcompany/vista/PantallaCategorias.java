package es.jaga.fastfoodcompany.vista;

import es.jaga.fastfoodcompany.controlador.AccionCategorias;
import es.jaga.fastfoodcompany.controlador.AccionCategoriaProducto;
import es.jaga.fastfoodcompany.modelo.entidades.Categoria;
import es.jaga.fastfoodcompany.modelo.entidades.CategoriaProducto;
import es.jaga.fastfoodcompany.modelo.entidades.Producto;
import es.jaga.fastfoodcompany.principal.FFCJFrame;
import java.awt.Image;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Classe del panel de gestion de categorias.
 * @author Jose Antonio González Alcántara
 */
public class PantallaCategorias extends javax.swing.JPanel {

    private final FFCJFrame frame;
    private final AccionCategorias acciones;
    private final AccionCategoriaProducto accionesLista;
    private Categoria categoria;
    private CategoriaProducto categoriaProducto;
    private DefaultListModel listaModeloProductos;
    private DefaultListModel listaModeloTodos;
    private String imagenBoton;
    private Image noImage = new ImageIcon(getClass().getResource("/img/no_imagen.png")).getImage();
    private ImageIcon noImageIcon = new ImageIcon(this.noImage.getScaledInstance(80, 80, Image.SCALE_SMOOTH));
    
    /**
     * Creates new form PanelCrearCategoría
     * @param frame
     */
    public PantallaCategorias(FFCJFrame frame) {
        initComponents();
        this.listaModeloProductos = new DefaultListModel();
        this.listaModeloTodos = new DefaultListModel();
        this.lstProductos.setModel(listaModeloProductos);
        this.lstTodosProductos.setModel(listaModeloTodos);
        this.frame = frame;
        this.acciones = new AccionCategorias();
        this.accionesLista = new AccionCategoriaProducto();
        this.btnImagen.setIcon(this.noImageIcon);
        this.vaciarListaProductos();
        this.cargarListaTodos(this.accionesLista.listarTodosProductos());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFormulario = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        lblId = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblProductos = new javax.swing.JLabel();
        btnImagen = new javax.swing.JButton();
        jspProductos = new javax.swing.JScrollPane();
        lstProductos = new javax.swing.JList();
        btnBuscarNombre = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        btnAgregarProducto = new javax.swing.JButton();
        btnElimarProducto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTodosProductos = new javax.swing.JList();
        lblTodosProductos = new javax.swing.JLabel();
        btnLimpiarFormulario = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));
        setLayout(new java.awt.BorderLayout(5, 5));

        pnlFormulario.setBorder(javax.swing.BorderFactory.createTitledBorder("Operaciones categorías"));

        btnGuardar.setText("Insertar nueva categoría");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        lblId.setText("Id:");

        lblNombre.setText("Nombre:");

        jLabel1.setText("Imagen:");

        lblProductos.setText("Productos:");

        btnImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagenActionPerformed(evt);
            }
        });

        lstProductos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jspProductos.setViewportView(lstProductos);

        btnBuscarNombre.setText("Buscar por nombre");
        btnBuscarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarNombreActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        txtId.setEditable(false);

        btnAgregarProducto.setText("< Agregar producto");
        btnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProductoActionPerformed(evt);
            }
        });

        btnElimarProducto.setText("Eliminar producto >");
        btnElimarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElimarProductoActionPerformed(evt);
            }
        });

        lstTodosProductos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstTodosProductos);

        lblTodosProductos.setText("Todos los productos:");

        btnLimpiarFormulario.setText("Limpiar formulario");
        btnLimpiarFormulario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarFormularioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFormularioLayout = new javax.swing.GroupLayout(pnlFormulario);
        pnlFormulario.setLayout(pnlFormularioLayout);
        pnlFormularioLayout.setHorizontalGroup(
            pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormularioLayout.createSequentialGroup()
                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormularioLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblId)
                            .addComponent(lblNombre)
                            .addComponent(lblProductos)
                            .addComponent(jLabel1))
                        .addGap(59, 59, 59))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFormularioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnLimpiarFormulario)
                        .addGap(18, 18, 18)))
                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormularioLayout.createSequentialGroup()
                        .addComponent(btnBuscarNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardar))
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFormularioLayout.createSequentialGroup()
                        .addComponent(jspProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregarProducto)
                            .addComponent(btnElimarProducto))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTodosProductos)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        pnlFormularioLayout.setVerticalGroup(
            pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormularioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(btnImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFormularioLayout.createSequentialGroup()
                        .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jspProductos, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(pnlFormularioLayout.createSequentialGroup()
                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProductos)
                                    .addComponent(lblTodosProductos))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardar)
                            .addComponent(btnModificar)
                            .addComponent(btnEliminar)
                            .addComponent(btnBuscarNombre)
                            .addComponent(btnLimpiarFormulario)))
                    .addGroup(pnlFormularioLayout.createSequentialGroup()
                        .addComponent(btnAgregarProducto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnElimarProducto)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        add(pnlFormulario, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagenActionPerformed
         try {
            String archivoOrigen = this.frame.cargarSelectorDeArchivos();
            String nombreArchivoOrigen = this.frame.extraerNombreArchivo(archivoOrigen);
            String archivoDestino = this.frame.getRutaImagenes() + nombreArchivoOrigen;
            this.frame.copiarFichero(archivoOrigen,archivoDestino);
            this.establecerImagenBoton(archivoDestino);
            this.setImagenBoton(nombreArchivoOrigen);
        } catch (IOException ex) {
            Logger.getLogger(PantallaProductos.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error al abrir el archivo", "Atención",JOptionPane.WARNING_MESSAGE);
        } catch (NullPointerException nEx) {
            JOptionPane.showMessageDialog(null, "No se ha selecionado ningun archivo");
        }
    }//GEN-LAST:event_btnImagenActionPerformed

    private void btnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProductoActionPerformed
        if (this.lstTodosProductos.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un producto de todos", "Atención",JOptionPane.WARNING_MESSAGE);
        } else{
            int indiceSeleccionado = this.lstTodosProductos.getSelectedIndex();
            this.listaModeloProductos.addElement(this.listaModeloTodos.get(indiceSeleccionado).toString());
            this.listaModeloTodos.remove(indiceSeleccionado);
        }
    }//GEN-LAST:event_btnAgregarProductoActionPerformed

    private void btnElimarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElimarProductoActionPerformed
        if (this.lstProductos.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un producto de producto", "Atención",JOptionPane.WARNING_MESSAGE);
        } else {
            int indiceSeleccionado = this.lstProductos.getSelectedIndex();
            this.listaModeloTodos.addElement(this.listaModeloProductos.get(indiceSeleccionado).toString());
            this.listaModeloProductos.remove(indiceSeleccionado);
        }
    }//GEN-LAST:event_btnElimarProductoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
       if (camposTiposCorrectos() && camposObligatoriosNoVacios()) {
            this.obtenerFormulario();
            if (this.acciones.insertar()) {
                this.vaciarFormulario();
            }  
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarNombreActionPerformed
        if (camposTiposCorrectos() && camposObligatoriosNoVacios()) {
            if (this.acciones.buscar(txtNombre.getText())) {
                this.establecerFormulario();
            }  
        } else {
            JOptionPane.showMessageDialog(null, "El campo nombre es obligatorios"
                    + " y debe ser letras", "Atención",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarNombreActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (camposTiposCorrectos() && !txtNombre.getText().isEmpty()) {
            this.obtenerFormulario();
            if (this.acciones.borrar()) {
                this.vaciarFormulario();
            }  
        } else {
            JOptionPane.showMessageDialog(null, "El campo nombre es obligatorios"
                    + " y debe ser letras", "Atención",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        if (camposTiposCorrectos() && !txtNombre.getText().isEmpty()) {
            this.obtenerFormulario();
            if (this.acciones.actualizar()) {
                this.vaciarFormulario();
            }  
        } else {
            JOptionPane.showMessageDialog(null, "El campo nombre es obligatorios"
                    + " y debe ser letras", "Atención",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnLimpiarFormularioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarFormularioActionPerformed
        vaciarFormulario();
    }//GEN-LAST:event_btnLimpiarFormularioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProducto;
    private javax.swing.JButton btnBuscarNombre;
    private javax.swing.JButton btnElimarProducto;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImagen;
    private javax.swing.JButton btnLimpiarFormulario;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jspProductos;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblProductos;
    private javax.swing.JLabel lblTodosProductos;
    private javax.swing.JList lstProductos;
    private javax.swing.JList lstTodosProductos;
    private javax.swing.JPanel pnlFormulario;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
    
    private void cargarListaProductos(List listaElementos) {
        if (listaElementos != null) {
            Iterator<Producto> iteratorLista = listaElementos.iterator();
            while (iteratorLista.hasNext()) {
                this.listaModeloProductos.addElement(iteratorLista.next().getNombre());
            }
        }
    }
    
    private void vaciarListaProductos(){
        this.listaModeloProductos.removeAllElements();
    }
    
    private void cargarListaTodos(List listaElementos) {
        if (listaElementos != null) {
            Iterator<Producto> iteratorLista = listaElementos.iterator();
            while (iteratorLista.hasNext()) {
                this.listaModeloTodos.addElement(iteratorLista.next().getNombre());
            } 
        } else {
            this.vaciarListaTodos();
        }
    }
    
    private void sustraerListaTodos(List listaElementos){
        if (listaElementos != null) {
            Iterator<Producto> iteratorLista = listaElementos.iterator();
            while (iteratorLista.hasNext()) {
                this.listaModeloTodos.removeElement(iteratorLista.next().getNombre());
            } 
        }
    }
    
    private void obtenerListaPodcutos(Categoria categoria){
        Enumeration enumeracionLista = this.listaModeloProductos.elements();
        while (enumeracionLista.hasMoreElements()) {
            String nombreProducto = enumeracionLista.nextElement().toString();
            Producto producto = this.accionesLista.obtenerProductoNombre(nombreProducto);
            this.categoriaProducto = new CategoriaProducto(categoria.getId(), producto.getId());
            this.accionesLista.establecer(this.categoriaProducto);
            categoria.incluirProducto(producto);
        }
    }
    
    private void vaciarListaTodos(){
        this.listaModeloTodos.removeAllElements();
    }
    
    private void obtenerFormulario(){
        if (this.txtId.getText().isEmpty()) {
            this.txtId.setText("0");
        }
        Categoria fCategoria = new Categoria(Integer.parseInt(this.txtId.getText()),this.txtNombre.getText(), this.getImagenBoton());
        this.obtenerListaPodcutos(fCategoria);
        this.acciones.establecer(fCategoria);
        this.categoria = fCategoria;
        this.accionesLista.establecer(null);
    }
    
    private void establecerFormulario(){
        this.vaciarListaProductos();
        this.categoria = this.acciones.obtener();
        this.txtId.setText(String.valueOf(this.categoria.getId()));
        this.establecerImagenBoton(this.frame.getRutaImagenes() + this.categoria.getImagen());
        this.cargarListaProductos(this.categoria.getProductos());
        this.sustraerListaTodos(this.categoria.getProductos());
        this.txtNombre.setText(this.categoria.getNombre());
    }
    
    private void vaciarFormulario(){
        this.txtId.setText("");
        this.txtNombre.setText("");
        this.imagenBoton = getClass().getResource("/img/no_imagen.png").toString();
        this.establecerImagenBoton(this.imagenBoton);
        this.vaciarListaProductos();
        this.vaciarListaTodos();
        this.cargarListaTodos(this.accionesLista.listarTodosProductos());
    }
        
    private void establecerImagenBoton(String nombreArchivoOrigen){
        Image imagenOriginal = new ImageIcon(nombreArchivoOrigen).getImage();
        ImageIcon imagenBotonEscalado = new ImageIcon(imagenOriginal.getScaledInstance(80, 80, Image.SCALE_SMOOTH));
        this.btnImagen.setIcon(imagenBotonEscalado);
    }

    private String getImagenBoton() {
        return imagenBoton;
    }

    private void setImagenBoton(String imagenBoton) {
        this.imagenBoton = imagenBoton;
    }
    
    private boolean camposObligatoriosNoVacios(){  
        if (this.txtNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo nombre es obligatorios", "Atención",JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }
    
    private boolean camposTiposCorrectos(){
        if (!esNumero(txtNombre.getText())) {
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "El campo nombre deben ser letras"
            , "Atención",JOptionPane.WARNING_MESSAGE);
            return false;
        }
    }
    
    private boolean esNumero(String texto){
         try {
            Integer.parseInt(texto);
            return true;
        } catch (Exception ex) {
            return false;
        }
    }
}
